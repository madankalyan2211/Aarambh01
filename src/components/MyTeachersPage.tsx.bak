import React, { useState, useEffect } from 'react';
import React, { useState, useEffect } from 'react';
import { Page } from '../App';
import { Card } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { motion } from 'motion/react';
import { Users, BookOpen, Mail, CheckCircle2, XCircle, Loader2, UserPlus, UserMinus } from 'lucide-react';
import { getAllTeachers, getMyTeachers, enrollWithTeacher, unenrollFromTeacher } from '../services/api.service';

interface MyTeachersPageProps {
  onNavigate: (page: Page) => void;
  userEmail: string;
}

export function MyTeachersPage({ onNavigate, userEmail }: MyTeachersPageProps) {
  const [selectedTeacher, setSelectedTeacher] = useState(null);
  const [allTeachers, setAllTeachers] = useState([]);
  const [myTeachers, setMyTeachers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [enrolling, setEnrolling] = useState(null);

  // Fetch teachers on mount
  useEffect(() => {
    fetchTeachers();
  }, []);

  const fetchTeachers = async () => {
    setLoading(true);
    try {
      const [allTeachersRes, myTeachersRes] = await Promise.all([
        getAllTeachers(),
        getMyTeachers(),
      ]);

      if (allTeachersRes.success) {
        setAllTeachers(allTeachersRes.data || []);
      }

      if (myTeachersRes.success) {
        setMyTeachers(myTeachersRes.data || []);
      }
    } catch (error) {
      console.error('Error fetching teachers:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEnrollToggle = async (teacherId: string) => {
    const isEnrolled = myTeachers.some(t => t.id === teacherId);
    setEnrolling(teacherId);

    try {
      const result = isEnrolled 
        ? await unenrollFromTeacher(teacherId)
        : await enrollWithTeacher(teacherId);

      if (result.success) {
        // Refresh the lists
        await fetchTeachers();
        alert(isEnrolled ? 'Successfully unenrolled from teacher' : 'Successfully enrolled with teacher!');
      } else {
        alert(result.message || 'Failed to update enrollment');
      }
    } catch (error) {
      console.error('Error toggling enrollment:', error);
      alert('Failed to update enrollment. Please try again.');
    } finally {
      setEnrolling(null);
    }
  };

  return (
    <div className="min-h-screen p-6">
      <div className="container mx-auto max-w-7xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1>My Teachers üë®‚Äçüè´</h1>
          <p className="text-muted-foreground">
            View your teachers and the courses they teach
          </p>
        </motion.div>

        {/* Main Content */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left Column - My Teachers */}
          <div className="lg:col-span-1">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.1 }}
            >
              <div className="flex items-center gap-2 mb-4">
                <Users className="h-5 w-5 text-primary" />
                <h2>My Teachers ({myTeachers.length})</h2>
              </div>

              {loading ? (
                <Card className="p-6 text-center">
                  <Loader2 className="h-8 w-8 text-primary mx-auto mb-3 animate-spin" />
                  <p className="text-muted-foreground">Loading teachers...</p>
                </Card>
              ) : myTeachers.length > 0 ? (
                <div className="space-y-3">
                  {myTeachers.map((teacher: any, index: number) => {
                    const isSelected = selectedTeacher?.id === teacher.id;

                    return (
                      <motion.div
                        key={teacher.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.1 * index }}
                      >
                        <Card
                          className={`p-4 cursor-pointer transition-all hover:shadow-lg ${
                            isSelected 
                              ? 'border-2 border-primary bg-primary/5' 
                              : 'border-secondary hover:border-primary/50'
                          }`}
                          onClick={() => setSelectedTeacher(isSelected ? null : teacher)}
                        >
                          <div className="flex items-start justify-between gap-3">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center text-xl">
                                  üë®‚Äçüè´
                                </div>
                                <div>
                                  <p className="font-semibold">{teacher.name}</p>
                                  <p className="text-xs text-muted-foreground flex items-center gap-1">
                                    <Mail className="h-3 w-3" />
                                    {teacher.email}
                                  </p>
                                </div>
                              </div>
                              
                              <div className="flex flex-wrap gap-2 mt-3">
                                <Badge variant="outline" className="text-xs">
                                  {teacher.studentCount || 0} Students
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  {teacher.courseCount || 0} Courses
                                </Badge>
                              </div>
                            </div>
                            
                            {isSelected && (
                              <CheckCircle2 className="h-5 w-5 text-primary shrink-0" />
                            )}
                          </div>
                        </Card>
                      </motion.div>
                    );
                  })}
                </div>
              ) : (
                <Card className="p-6 text-center">
                  <XCircle className="h-12 w-12 text-muted-foreground mx-auto mb-3" />
                  <p className="text-muted-foreground mb-3">
                    You haven't enrolled with any teachers yet.
                  </p>
                  <p className="text-sm text-muted-foreground">
                    Browse available teachers below to get started!
                  </p>
                </Card>
              )}
            </motion.div>

            {/* Available Teachers Section */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className="mt-8"
            >
              <div className="flex items-center gap-2 mb-4">
                <BookOpen className="h-5 w-5 text-accent" />
                <h2>Available Teachers ({allTeachers.length})</h2>
              </div>

              {loading ? (
                <Card className="p-6 text-center">
                  <Loader2 className="h-8 w-8 text-primary mx-auto mb-3 animate-spin" />
                  <p className="text-muted-foreground">Loading...</p>
                </Card>
              ) : (
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {allTeachers.map((teacher: any, index: number) => {
                    const isEnrolled = myTeachers.some(t => t.id === teacher.id);
                    const isProcessing = enrolling === teacher.id;

                    return (
                      <motion.div
                        key={teacher.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.05 * index }}
                      >
                        <Card className="p-3 hover:shadow-md transition-all border-secondary">
                          <div className="flex items-center justify-between gap-3">
                            <div className="flex items-center gap-2 flex-1">
                              <div className="w-8 h-8 rounded-full bg-accent/10 flex items-center justify-center text-lg">
                                üë®‚Äçüè´
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="font-medium text-sm truncate">{teacher.name}</p>
                                <p className="text-xs text-muted-foreground truncate">{teacher.email}</p>
                              </div>
                            </div>
                            <Button
                              size="sm"
                              variant={isEnrolled ? "outline" : "default"}
                              className={isEnrolled ? "" : "bg-primary hover:bg-accent"}
                              onClick={() => handleEnrollToggle(teacher.id)}
                              disabled={isProcessing}
                            >
                              {isProcessing ? (
                                <Loader2 className="h-4 w-4 animate-spin" />
                              ) : isEnrolled ? (
                                <><UserMinus className="h-4 w-4 mr-1" /> Unenroll</>
                              ) : (
                                <><UserPlus className="h-4 w-4 mr-1" /> Enroll</>
                              )}
                            </Button>
                          </div>
                        </Card>
                      </motion.div>
                    );
                  })}
                </div>
              )}
            </motion.div>
          </div>

          {/* Right Column - Teacher Details */}
          <div className="lg:col-span-2">
            {selectedTeacher ? (
              <motion.div
                key={selectedTeacher.id}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3 }}
                className="space-y-6"
              >
                {/* Teacher Info Card */}
                <Card className="p-6 bg-gradient-to-br from-primary/10 to-secondary/10 border-primary/30">
                  <div className="flex items-start gap-4">
                    <div className="w-16 h-16 rounded-full bg-primary/20 flex items-center justify-center text-3xl">
                      üë®‚Äçüè´
                    </div>
                    <div className="flex-1">
                      <h2 className="mb-1">{selectedTeacher.name}</h2>
                      <p className="text-sm text-muted-foreground mb-3 flex items-center gap-2">
                        <Mail className="h-4 w-4" />
                        {selectedTeacher.email}
                      </p>
                      {selectedTeacher.bio && (
                        <p className="text-sm text-muted-foreground mb-3">
                          {selectedTeacher.bio}
                        </p>
                      )}
                      <div className="flex gap-4">
                        <div>
                          <p className="text-2xl font-bold text-primary">{selectedTeacher.studentCount || 0}</p>
                          <p className="text-xs text-muted-foreground">Students</p>
                        </div>
                        <div>
                          <p className="text-2xl font-bold text-accent">{selectedTeacher.courseCount || 0}</p>
                          <p className="text-xs text-muted-foreground">Courses</p>
                        </div>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEnrollToggle(selectedTeacher.id)}
                      disabled={enrolling === selectedTeacher.id}
                      className="shrink-0"
                    >
                      {enrolling === selectedTeacher.id ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                      ) : (
                        <><UserMinus className="h-4 w-4 mr-1" /> Unenroll</>
                      )}
                    </Button>
                  </div>
                </Card>

                {/* Additional Info */}
                <Card className="p-6">
                  <h3 className="mb-4">About This Teacher</h3>
                  <div className="space-y-4">
                    <div>
                      <p className="text-sm font-medium mb-1">Teaching Experience</p>
                      <p className="text-sm text-muted-foreground">
                        Currently teaching {selectedTeacher.courseCount || 0} courses with {selectedTeacher.studentCount || 0} enrolled students.
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium mb-1">Courses & Assignments</p>
                      <p className="text-sm text-muted-foreground">
                        View courses and assignments on the Courses page.
                      </p>
                    </div>
                    <Button
                      className="bg-primary hover:bg-accent w-full"
                      onClick={() => onNavigate('course')}
                    >
                      <BookOpen className="h-4 w-4 mr-2" />
                      Browse Courses
                    </Button>
                  </div>
                </Card>
              </motion.div>
            ) : (
              <Card className="p-12 text-center">
                <Users className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                <h3 className="mb-2">Select a Teacher</h3>
                <p className="text-muted-foreground">
                  Click on a teacher from your enrolled list to view their details
                </p>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
